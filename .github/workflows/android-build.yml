name: Android Release Build
  
on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Vérification de la structure du projet
        run: |
          echo "Vérification de la structure du projet..."
          if [ ! -d "android" ]; then
            echo "Le répertoire 'android' est manquant. Assurez-vous que c'est un projet Android ou React Native."
            exit 1
          fi
          if [ ! -f "package.json" ]; then
            echo "Le fichier 'package.json' est manquant. Assurez-vous que c'est un projet React Native."
            exit 1
          fi
          if [ ! -f "android/build.gradle" ]; then
            echo "Le fichier 'android/build.gradle' est manquant."
            exit 1
          fi
          echo "Structure du projet validée."

      - name: Vérifier et installer jq
        run: |
          if ! command -v jq &> /dev/null; then
            echo "jq n'est pas installé, installation en cours..."
            sudo apt-get update && sudo apt-get install -y jq
          else
            echo "jq est déjà installé."
          fi

      - name: Install Android SDK (cmdline-tools)
        run: |
          echo "Installation du SDK Android..."
          mkdir -p android-sdk/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O sdk.zip
          unzip sdk.zip -d tmp-sdk
          mv tmp-sdk/cmdline-tools android-sdk/cmdline-tools/latest
          rm -rf tmp-sdk sdk.zip
          echo "ANDROID_HOME=$PWD/android-sdk" >> $GITHUB_ENV
          echo "$PWD/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$PWD/android-sdk/platform-tools" >> $GITHUB_PATH
          echo "ANDROID_SDK_ROOT=$PWD/android-sdk" >> $GITHUB_ENV

      - name: Accepter les licences SDK et installer les composants nécessaires
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          sdkmanager --update

      - name: Lire version de Node.js depuis package.json
        id: detect-node
        run: |
          if [ -f "package.json" ]; then
            version=$(jq -r '.engines.node' package.json)
            if [ "$version" == "null" ] || [ -z "$version" ]; then
              echo "version=18" >> $GITHUB_OUTPUT
            else
              echo "version=$version" >> $GITHUB_OUTPUT
            fi
          else
            echo "version=18" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.detect-node.outputs.version }}

      - name: Installer les dépendances npm (ci ou install)
        run: |
          if [ -f "package-lock.json" ]; then
            echo "package-lock.json trouvé. Utilisation de 'npm ci'..."
            npm ci
          else
            echo "package-lock.json absent. Utilisation de 'npm install'..."
            npm install
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Ajouter compileSdkVersion si manquant
        run: |
          if ! grep -q "compileSdkVersion" android/build.gradle; then
            echo "Ajout de compileSdkVersion = 33"
            sed -i '/ext {/a\        compileSdkVersion = 33' android/build.gradle
          fi

      
      - name: Setup Release Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/my-release-key.keystore
          echo "storeFile=my-release-key.keystore" >> android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          chmod 600 android/app/my-release-key.keystore
          chmod 600 android/key.properties

      - name: Activer la minification pour la Release
        run: |
          if ! grep -q "minifyEnabled true" android/app/build.gradle; then
            echo "Enabling minification for release"
            sed -i '/buildTypes {/a\        release {\n            minifyEnabled true\n            shrinkResources true\n            proguardFiles getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\"\n        }' android/app/build.gradle
          fi
      

      - name: Build Release APK
        run: ./gradlew assembleRelease -Dorg.gradle.jvmargs="-Xmx4096m -XX:MaxMetaspaceSize=1024m" --no-daemon
        working-directory: android

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: android/app/build/outputs/apk/release/*.apk
          retention-days: 7

      
